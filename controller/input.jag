<%

/* Author - mihil ranathunga
* email-mihil@wso2.com
* project-wso2 Hardware Repository
* interns UOM- 2014
*/

include("../model/inputModel.jag");

var dataStore=require("../store.json");
var dssUrl = dataStore.urlConfigurations.dssUrl;

response.contentType = 'text/javascript';

var verb = request.getMethod();
var data = request.getContent();
var uri = request.getRequestURI();
var param=request.getQueryString();

var log = new Log();

log.info(verb +'-URI: '+uri+'-Content:'+JSON.stringify(data)+', Parameters:'+JSON.stringify(param));

var callPath=uri.replace("/WSO2-HW-REPO/server/user","");

var user_id = session.get("LOGGED_IN_USER");

var opr;
var opr2;
var id1;
var id2;

if(uri != null) {

var uriMatcher = new URIMatcher(callPath);

    if(uriMatcher.match("/{operation}")) {     
        opr = uriMatcher.elements().operation;
        log.info(opr);

    }
    if(uriMatcher.match("/{operation}/{id}")) { 
        opr = uriMatcher.elements().operation;    
        id1 = uriMatcher.elements().id;

        log.info(opr);
        log.info(id1);

    }
    if(uriMatcher.match("/{operation}/{id}/{depopr}")) { 
        opr = uriMatcher.elements().operation;    
        id1 = uriMatcher.elements().id;
        opr2 = uriMatcher.elements().depopr; 

        log.info(opr);
        log.info(id1);
        log.info(opr2);

    }
    if(uriMatcher.match("/{operation}/{id}/{depopr}/{depid}")) { 
        opr = uriMatcher.elements().operation;    
        id1 = uriMatcher.elements().id;
        opr2 = uriMatcher.elements().depopr;
        id2 = uriMatcher.elements().depid;

        log.info(opr);
        log.info(id1);
        log.info(opr2);
        log.info(id2);

    }
}

if (verb == "POST") {


    if (opr == 'requests') {


        var addRequestObj = data.dev;

       // log.info(stringify(addRequestObj));

        var viewReqObj={'device_type':addRequestObj.device,'purpose':addRequestObj.purpose,'req':addRequestObj.req,'emp_id':user_id};

        var result=addNewRequest(viewReqObj);
        if(result={}){
        print(result);
        }
       
    } 
    else if (opr == 'devices' && opr2 == 'issues') {
        
        var addIssueObj = data.issue;

        addIssueObj.emp_id=user_id;

        //log.info(addIssueObj);

        addIssue(addIssueObj);
        print({
                    'information': 'issue reported successfully'
                }

        );
    }
      
}

if (verb == "GET" ) {

    if (opr ==='requests' ) {

        var result=viewRequestsByUser(user_id);

        // if result has multiple entries it is returned as an array View requests results of type
        // {"requests":[{result1},{result2},{re...}]}

        if( Object.prototype.toString.call(result) === '[object Array]' ) {
 
            print({"requests":result});
        }
        else{
            print({"requests":[result]});
        }

    } else if (opr == 'devices' && opr2 ==null) {

        if(id1 !=null){
            var result =viewDeviceByID(id1);

            print(result);

        }
        else{
            var result=viewDevicesByUser(user_id);

        // if result has multiple entries it is returned as an array View requests results of type
        // {"devices":[{result1},{result2},{re...}]}

        if( Object.prototype.toString.call(result) === '[object Array]' ) {
            print({"devices":result});
        }
        else{
            print({"devices":[result]});
        }
        }

    }
    else if(opr == 'devices' && opr2 == 'upgrades'){

        //log.info(viewUpgradeHistoryByDeviceID(deviceID));

        print(viewUpgradeHistoryByDeviceID(id2));

    }
    else if (opr == 'devices' && opr2== 'accessories') {

        var result = viewAccessoryByDeviceID(id1);

        //log.info(result);
        print(result);

    }
    else if (opr == 'devices' && opr2 == 'issues') {

    //log.info('viewIssueHistoryByDeviceID'+id1);
        print(viewIssueHistoryByDeviceID(id1,user_id));
    } 
     else if (opr == 'devices' && opr2 == 'warranties') {


     // log.info(viewWarrantyByDeviceID(deviceID));

      print(viewWarrantyByDeviceID(id1,user_id));

    }
    else if (opr == 'issues') {

        var result=viewIssuesByUser(user_id);

        // if result has multiple entries it is returned as an array View issues results of type
        // {"issues":[{result1},{result2},{re...}]}

        if( Object.prototype.toString.call(result) === '[object Array]' ) {
            print({"issues":result});
        }
        else{
            print({"issues":[result]});
        }


    }
}
if(verb=="PUT"){

    if(opr == 'userCheck'){

        if(checkUser(user_id) == null){

            putUser(user_id);

        }

       print({'user_id':user_id});

    }

    else if(opr2=='issues' && id2 != null){

            var editIssueObj = data;

       // log.info(JSON.stringify(data)+'  editIssueObj'+id1+' '+id2);

      editIssueObj.issue.emp_id=user_id;
      editIssueObj.issue.dev_id=id1;
      editIssueObj.issue.issue_id=id2;
       editIssue(editIssueObj.issue);

    }
    else if (opr=='issues' && id1 != null) {

        print(confirmRequest(request_id));

    }

}
if(verb =="DELETE"){

    if(opr=='issues' && id1 != null){

        var deleteIssueObj = {'emp_id':user_id,'issue_id':id1};
      
       deleteIssue(deleteIssueObj);

    }
    else if(opr=='requests' && id1 != null){


        //log.info(request_id);

        print(deleteRequest(id1));
    }

}

%>