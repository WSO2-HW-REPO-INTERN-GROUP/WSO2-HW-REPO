<%



function viewDeviceByID(deviceID) {

    var url = dssUrl + "GetDeviceByID";

    var rslt = post(url, {
        "device_id": deviceID
    }, {"Content-Type":"application/json","Accept": "application/json"
    }, "json");

    return rslt.data.BaseElement.Element;
}


function viewAccessoryByDeviceID(deviceID) {



    var url = dssUrl + "GetAccessoriesByDeviceID";
    var rslt = get(url, {
        "dev_id": deviceID
    }, {
        "Accept": "application/json"
    }, "json");

    return returnValue(rslt.data.BaseElement);
}

function viewUpgradeHistoryByDeviceID(deviceID) {

    var url = dssUrl + "GetDeviceUpgradeHistory";
    var rslt = post(url, {
        "device_id": deviceID
    }, {"Content-Type":"application/json",
        "Accept": "application/json"
    }, "json");
    log.info(rslt);

    return returnValue(rslt.data.BaseElement);

}

function viewIssueHistoryByDeviceID(deviceID,user_id) {


    var url = dssUrl + "GetIssuesByDeviceAndEmployee";

    var rslt = get(url, {
        "dev_id": deviceID,
        "emp_id": user_id
    }, {
        "Accept": "application/json"
    }, "json");

    return returnValue(rslt.data.BaseElement);

}

function viewRequestsByUser(user_id) {



    var url = dssUrl+"GetRequestsByEmployee";
    
    var rslt=get(url,{"emp_id":user_id},{"Accept":"application/json"},"json");

    return returnValue(rslt.data.BaseElement);

}


function viewDevicesByUser(user_id) {

    var url = dssUrl+"GetDevicesByEmployee";
    var rslt=get(url,{"emp_id":user_id},{"Accept":"application/json"},"json");



    return returnValue(rslt.data.BaseElement);

}

function addNewRequest(addReqObj) {

    log.info(stringify(addReqObj));
    var url = dssUrl+"AddDeviceRequest"
    var data=addReqObj;
    var headers = {Accept:"application/json" };
    var rslt=get(url,data,headers,'json',function(data,xhr){
    })

}


function addIssue(issue) {


    var url = dssUrl+"AddIssue"
    var headers = {"Content-Type":"application/json","Accept":"application/json" };
    var rslt=post(url,issue,headers,'json',function(data,xhr){});
    log.info(rslt);

}

function  returnValue(returnBaseElement){

    //log.info(returnBaseElement);
    //log.info(returnBaseElement.Element);

    if(returnBaseElement.Element == null){
        return [{}];
    }
    else{
        if( Object.prototype.toString.call(returnBaseElement.Element) === '[object Array]' ) {
            return returnBaseElement.Element;
        }
        else{
            return [returnBaseElement.Element];
        }
        
    }

}

function editIssue(issue){

    var url = dssUrl+"EditIssue"
    var headers = {"Content-Type":"application/json","Accept":"application/json" };
   // var rslt=post(url,issue,headers,'json',function(data,xhr){});
    //log.info(rslt);
}

function addOrder(bookName, authName, bookType) {
    if (session.get("count") == null) {
        session.put("count", 0);
    }
    var orderIdx = session.get("count");

    var orderO = session.get("orders");
    if (orderO != null) {
        //orderIdx = orderO.length;
        var orderCount = session.get("count");
        orderCount++;
        session.put("count", orderCount);
        orderIdx = orderCount;
    }
    var hasBookType = bookdata.indexOf(bookType);


    if (hasBookType != null) {
        var orders;
        if (orderO != null) {
            var orderJson = session.get("orders"); // get order array from session
            orderJson.push(orderIdx); //push new order to the already retrieved orderlist
            session.put("orders", orderJson); // restore order list in session
        } else {
            session.put("orders", [0]);
        }
        var object = {
            "ORDER_ID": orderIdx,
            "BOOK-TYPE": bookType,
            "NAME": bookName,
            "AUTHOR": authName,
        };
        session.put("o" + orderIdx, object);
        //order is been taken
        var result = session.get("o" + orderIdx);
        print(result);
    } else {
        print({
            "Infor": "Sorry, Book Cannot be added"
        });
    }
}
%>